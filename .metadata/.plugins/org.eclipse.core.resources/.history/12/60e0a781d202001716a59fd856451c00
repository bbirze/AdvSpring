package demo.springbatch;

import org.apache.log4j.Logger;
import org.springframework.batch.core.Job;
import org.springframework.batch.core.Step;
import org.springframework.batch.core.StepContribution;
import org.springframework.batch.core.configuration.annotation.EnableBatchProcessing;
import org.springframework.batch.core.configuration.annotation.JobBuilderFactory;
import org.springframework.batch.core.configuration.annotation.StepBuilderFactory;
import org.springframework.batch.core.job.builder.JobBuilder;
import org.springframework.batch.core.job.builder.SimpleJobBuilder;
import org.springframework.batch.core.launch.support.RunIdIncrementer;
import org.springframework.batch.core.scope.context.ChunkContext;
import org.springframework.batch.core.step.tasklet.Tasklet;
import org.springframework.batch.repeat.RepeatStatus;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
@EnableBatchProcessing
@EnableAutoConfiguration
public class BatchConfiguration {

	private Logger log=Logger.getLogger(BatchConfiguration.class);
	
	@Autowired
	private JobBuilderFactory jobBuilderFactory;
	
	@Autowired 
	private StepBuilderFactory stepBuilderFactory;
	
	@Bean
	public Step step1()  {
		return stepBuilderFactory.get("step1").tasklet(new Tasklet() {
			// Tasklets are custom processing, no need for readers and writers
			@Override
			public RepeatStatus execute(StepContribution contribution, 
										ChunkContext chunkContext) throws Exception {
				log.info("************ STEP 1");
				return RepeatStatus.FINISHED;	}
		}).build();
	}
	
	@Bean
	public Job job() throws Exception  {
//                   Break down code in the Student Guide, below commented 
//		return jobBuilderFactory.get("job1").
//		           .incrementer(new RunIdIncrementer())
//		           .start(step1()).build();
		
		RunIdIncrementer incrementer = new RunIdIncrementer();
		JobBuilder jb = jobBuilderFactory.get("job1");
		jb.incrementer(incrementer);

		SimpleJobBuilder sjb = jb.start(step1());
		return sjb.build();		
	}

}
